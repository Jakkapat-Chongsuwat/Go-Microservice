services:
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
      - "50052:50052"
    environment:
      - DB_HOST=user_service_db
      - DB_USER=devuser
      - DB_PASS=devpass
      - DB_NAME=user_service
      - DB_SCHEMA=user_service
      - REPO_TYPE=gorm
      - DB_DRIVER=postgres
      - DB_SSLMODE=disable
      - DB_PORT=5555
      - GRPC_PORT=50051
      - HTTP_PORT=50052
    depends_on:
      - user_service_db

  user_service_db:
    image: postgres:15-alpine
    container_name: user_service_db
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: user_service
    ports:
      - "5555:5555"
    volumes:
      - user_service_data:/var/lib/postgresql/data
    command: -p 5555
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d user_service"]
      interval: 5s
      timeout: 2s
      retries: 5

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "60051:60051"
      - "60052:60052"
    environment:
      - DB_HOST=order_service_db
      - DB_USER=devuser
      - DB_PASS=devpass
      - DB_PORT=5556
      - DB_NAME=order_service
      - DB_SCHEMA=order_service
      - DB_SSLMODE=disable
      - DB_DRIVER=postgres
      - REPO_TYPE=gorm
      - USER_SERVICE_ADDRESS=user-service:50051
      - INVENTORY_SERVICE_ADDRESS=inventory-service:30051
      - GRPC_PORT=60051
      - KAFKA_PORT=9092
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_ORDER_TOPIC=order-events
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - HTTP_PORT=60052
    depends_on:
      - order_service_db
      - user-service
      - kafka

  order_service_db:
    image: postgres:15-alpine
    container_name: order_service_db
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: order_service
    ports:
      - "5556:5556"
    volumes:
      - order_service_data:/var/lib/postgresql/data
    command: -p 5556 -c "shared_preload_libraries=pgcrypto"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d order_service"]
      interval: 5s
      timeout: 2s
      retries: 5

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "30051:30051"
    environment:
      - DB_HOST=inventory_service_db
      - DB_USER=devuser
      - DB_PASS=devpass
      - DB_PORT=5557
      - DB_NAME=inventory_service
      - DB_SCHEMA=public
      - DB_SSLMODE=disable
      - DB_DRIVER=postgres
      - REPO_TYPE=gorm
      - GRPC_PORT=30051
      - HTTP_PORT=30052
    depends_on:
      - inventory_service_db

  inventory_service_db:
    image: postgres:15-alpine
    container_name: inventory_service_db
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: inventory_service
    ports:
      - "5557:5557"
    volumes:
      - inventory_service_data:/var/lib/postgresql/data
    command: -p 5557 -c "shared_preload_libraries=pgcrypto"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d inventory_service"]
      interval: 5s
      timeout: 2s
      retries: 5

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "20051:20051"
    environment:
      - KAFKA_PORT=9092
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUP_ID=notification-service-group
      - KAFKA_TOPIC=order-events
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - GRPC_PORT=20051
    depends_on:
      - kafka
      - schema-registry

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=CONTROLLER://0.0.0.0:9093,BROKER://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CONTROLLER://kafka:9093,BROKER://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=BROKER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,BROKER:PLAINTEXT
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: krakend
    ports:
      - "9001:8080"
    environment:
      - KRAKEND_TIMEOUT=500ms
      - KRAKEND_NAME=Custom Order Gateway
      - ORDER_SERVICE_URL=http://order-service:60052
      - USER_SERVICE_URL=http://user-service:50052
      - INVENTORY_SERVICE_URL=http://inventory-service:30052
    volumes:
      - ./api-gateway/krakend.json.tpl:/etc/krakend/krakend.json.tpl

volumes:
  user_service_data:
  order_service_data:
  inventory_service_data:
  kafka_data:
